module FIFO(
    input [7:0] din,        //16*8 FIFO
    input we,
    input re,
    input clk,
    input rst,
    output empty,
    output full,
    output reg [7:0] dout
    );
    reg [3:0] wr_ptr;
    reg [3:0] rd_ptr;
    reg [4:0] counter;
    
    reg [7:0] mem [15:0];
    
    integer i;
    
    assign empty=(counter==0)? 1'b1:1'b0;
    assign full=(counter>5'b01111)? 1'b1:1'b0;
    
    always@(posedge clk) //counter incrementation based on write, read and reset
    begin
    if(rst)
        
        counter<=5'b0;
            
     else if(!full && we)
        counter <= counter+1;
     
     else if(!empty && re)
        counter <= counter-1;
        
     else
        counter <=counter;
    
     end
            
    always@(posedge clk)        //write operation
    begin
    if(rst)
        begin
        wr_ptr<=0;
        for(i=0;i<16;i=i+1)
            mem[i]<=0;
            end
    else if ((we) &&(!full))
    begin
            mem[wr_ptr]<=din;
            wr_ptr=wr_ptr+1;
    end
    else
        wr_ptr<=wr_ptr;
           end     
   
   always@(posedge clk)     //read operation
    begin
    if(rst)
        begin
        rd_ptr<=0;
        for(i=0;i<16;i=i+1)
            mem[i]<=0;
            end
    else if ((re) &&(!empty))
    begin
            dout<=mem[rd_ptr];
            rd_ptr=rd_ptr+1;
    end
    else
        rd_ptr<=rd_ptr;
           end     
